# -*- coding: us-ascii -*-

import sys

### Usage ###

#4-Indel_validation.py - Extract information from temp_part2.txt generated by 2-Indel_validation.py program

#input file: temp_part2.txt, command line: python 4-Indel_validation.py temp_part2.txt 20
#sys.argv[2] (20 here) corresponds to the Threshold to detect insertion/deletion

#By Julien Boutte, April 2019
#Copyright (c) 2019 Julien Boutte.
#Version 1.0.0

#This program is free software: you can redistribute it and/or modify it under
#the terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version. A copy of this license is available at <http://www.gnu.org/licenses/>.
#Great effort has been taken to make this software perform its said
#task, however, this software comes with ABSOLUTELY NO WARRANTY,
#not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
threshold=0
threshold=int(sys.argv[2])

print "threshold selected:", threshold

#Creation of 1 output files

def mean(liste):
    total=0
    for i in liste:
        total=total+float(i)
    return (float(float(total)/len(liste)))

inputfile=open(sys.argv[1],'r')

#D1= region of GAP
#D2= region of GAP + 10bp before+10 bp after

liste_mean_D2_GAP=[]
liste_mean_D2_NoGAP=[]

output4=open('MRD2_MRD3_T'+str(threshold)+'.txt','w')

for line in inputfile:
    if line[0]=='>':
        if len(liste_mean_D2_GAP)!=0 and len(liste_mean_D2_NoGAP)!=0:
            #print 'step1'
            liste_mean_D2_GAP=sorted(liste_mean_D2_GAP)
            liste_mean_D2_NoGAP=sorted(liste_mean_D2_NoGAP)
            if max(liste_mean_D2_NoGAP)>=max(liste_mean_D2_GAP):
                toto=max(liste_mean_D2_NoGAP)
                plop=0
                for i in liste_mean_D2_NoGAP:
                    if abs(max(liste_mean_D2_GAP)-i)<toto:
                        toto=abs(max(liste_mean_D2_GAP)-i)
                        tata=i
                        plop=1
                if plop==1:
                    plup=tata
                else:
                    plup=max(liste_mean_D2_NoGAP)
                ### HERE
                if plup<=threshold or max(liste_mean_D2_GAP)<=threshold:
                    output4.write(name+'\t'+str(max(liste_mean_D2_GAP))+'\t'+str(plup)+'\n')
            else:
                toto=max(liste_mean_D2_GAP)
                plop=0
                for i in liste_mean_D2_GAP:
                    if abs(max(liste_mean_D2_NoGAP)-i)<toto:
                        toto=abs(max(liste_mean_D2_NoGAP)-i)
                        tata=i
                        plop=1
                if plop==1:
                    plup=tata
                else:
                    plup=max(liste_mean_D2_GAP)
                ### HERE
                if plup<=threshold or max(liste_mean_D2_NoGAP)<=threshold:
                    output4.write(name+'\t'+str(plup)+'\t'+str(max(liste_mean_D2_NoGAP))+'\n')
            liste_mean_D2_GAP=[]
            liste_mean_D2_NoGAP=[]
        name=line[1:].replace('\n','')
    else:
        temp=line.split('\t')
        if temp[-1].replace('\n','')!='NA':
            if temp[1]=='No-GAP' and temp[7]!='NA':
                #print 'step2'
                liste_mean_D2_NoGAP.append(float(temp[7]))
            elif temp[7]!='NA':
                #print 'step3'
                liste_mean_D2_GAP.append(float(temp[7].replace('\n','')))

if len(liste_mean_D2_GAP)!=0 and len(liste_mean_D2_NoGAP)!=0:
    liste_mean_D2_GAP=sorted(liste_mean_D2_GAP)
    liste_mean_D2_NoGAP=sorted(liste_mean_D2_NoGAP)
    if max(liste_mean_D2_NoGAP)>=max(liste_mean_D2_GAP):
        toto=max(liste_mean_D2_NoGAP)
        plop=0
        for i in liste_mean_D2_NoGAP:
            if abs(max(liste_mean_D2_GAP)-i)<toto:
                toto=abs(max(liste_mean_D2_GAP)-i)
                tata=i
                plop=1
        if plop==1:
            plup=tata
        else:
            plup=max(liste_mean_D2_NoGAP)
        ### HERE
        if plup<=threshold or max(liste_mean_D2_GAP)<=threshold:
            output4.write(name+'\t'+str(max(liste_mean_D2_GAP))+'\t'+str(plup)+'\n')
    else:
        toto=max(liste_mean_D2_GAP)
        plop=0
        for i in liste_mean_D2_GAP:
            if abs(max(liste_mean_D2_NoGAP)-i)<toto:
                toto=abs(max(liste_mean_D2_NoGAP)-i)
                tata=i
                plop=1
        if plop==1:
            plup=tata
        else:
            plup=max(liste_mean_D2_GAP)
        ### HERE
        if plup<=threshold or max(liste_mean_D2_NoGAP)<=threshold:
            output4.write(name+'\t'+str(plup)+'\t'+str(max(liste_mean_D2_NoGAP))+'\n')
output4.close()
